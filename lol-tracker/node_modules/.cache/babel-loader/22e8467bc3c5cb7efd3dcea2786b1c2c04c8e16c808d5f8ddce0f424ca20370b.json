{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ewq56\\\\College\\\\Drexel\\\\CI 102-103\\\\LOL Stat Tracker\\\\group08\\\\lol-tracker\\\\src\\\\components\\\\Backdrop.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport '../css/App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Backdrop = ({\n  currentSummonerName,\n  currentSummonerTag,\n  version,\n  playerData\n}) => {\n  _s();\n  const [gameList, setGameList] = useState([]);\n  const [loading, setLoading] = useState(false); // Set initial loading state to false\n  const bannerVersion = \"1\";\n\n  // Function to calculate the most played champion\n  const calculateMostPlayedChampion = () => {\n    if (!Array.isArray(gameList) || gameList.length === 0) {\n      return \"Kayn\"; // Default champion if gameList is empty\n    }\n\n    const championCounts = {};\n    gameList.forEach(gameData => {\n      const searchedParticipant = gameData.info.participants.find(participant => participant.summonerName === currentSummonerName);\n      if (searchedParticipant) {\n        const championName = searchedParticipant.championName;\n        championCounts[championName] = (championCounts[championName] || 0) + 1;\n      }\n    });\n\n    // Find the champion with the highest count\n    let maxCount = 0;\n    let mostPlayedChampion = null;\n    for (const champion in championCounts) {\n      if (championCounts[champion] > maxCount) {\n        mostPlayedChampion = champion;\n        maxCount = championCounts[champion];\n      }\n    }\n    return mostPlayedChampion || \"Kayn\"; // Default champion if unable to determine\n  };\n\n  /*\r\n  const calculateMostRecentChampion = () => {\r\n    if (!Array.isArray(gameList) || gameList.length === 0) {\r\n      return \"Kayn\"; // Default champion if gameList is empty\r\n    }\r\n  \r\n    // Sort the gameList based on game creation timestamp in descending order\r\n    const sortedGames = gameList.slice().sort((a, b) => b.info.gameCreation - a.info.gameCreation);\r\n  \r\n    const mostRecentGameData = sortedGames.find((gameData) => {\r\n      const searchedParticipant = gameData.info.participants.find(participant => participant.summonerName === currentSummonerName);\r\n      return searchedParticipant;\r\n    });\r\n  \r\n    // Return the championName from the most recent game, or \"Kayn\" if no game is found\r\n    return mostRecentGameData ? mostRecentGameData.info.participants.find(participant => participant.summonerName === currentSummonerName).championName : \"Kayn\";\r\n  };\r\n  */\n\n  const mostPlayedChamp = calculateMostPlayedChampion();\n  //const mostRecentPlayedChamp = calculateMostRecentChampion();\n\n  // Check if playerData is available before fetching recent games\n  useEffect(() => {\n    if (playerData) {\n      setLoading(true); // Set loading to true when a new player search occurs\n      // Fetch recent games and limit to the last 20\n      axios.get(\"http://localhost:4000/recentGames\", {\n        params: {\n          username: currentSummonerName,\n          tagline: currentSummonerTag\n        }\n      }).then(function (response) {\n        // Limit the gameList to the last 20 games\n        const last20Games = response.data.slice(0, 20);\n        setGameList(last20Games);\n      }).catch(function (error) {\n        console.log(error);\n      }).finally(() => {\n        setLoading(false); // Set loading to false when data is loaded (or on error)\n      });\n    }\n  }, [currentSummonerName, playerData]);\n\n  // Render the component based on loading state and playerData\n  if (playerData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-circle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 21\n      }, this), !loading && mostPlayedChamp && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"champ-background-image\",\n        style: {\n          backgroundImage: `url('https://static.bigbrain.gg/assets/lol/riot_static/${version}/img/splash/${mostPlayedChamp}_${bannerVersion}.jpg')`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this);\n  } else {\n    return null;\n  }\n};\n_s(Backdrop, \"iEt+K6QeVHc7MiytE2n/6hC/IEI=\");\n_c = Backdrop;\nexport default Backdrop;\nvar _c;\n$RefreshReg$(_c, \"Backdrop\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","Backdrop","currentSummonerName","currentSummonerTag","version","playerData","_s","gameList","setGameList","loading","setLoading","bannerVersion","calculateMostPlayedChampion","Array","isArray","length","championCounts","forEach","gameData","searchedParticipant","info","participants","find","participant","summonerName","championName","maxCount","mostPlayedChampion","champion","mostPlayedChamp","get","params","username","tagline","then","response","last20Games","data","slice","catch","error","console","log","finally","children","className","fileName","_jsxFileName","lineNumber","columnNumber","style","backgroundImage","_c","$RefreshReg$"],"sources":["C:/Users/ewq56/College/Drexel/CI 102-103/LOL Stat Tracker/group08/lol-tracker/src/components/Backdrop.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport '../css/App.css';\r\n\r\nconst Backdrop = ({ currentSummonerName, currentSummonerTag, version, playerData }) => {\r\n  const [gameList, setGameList] = useState([]);\r\n  const [loading, setLoading] = useState(false); // Set initial loading state to false\r\n  const bannerVersion = \"1\";\r\n\r\n  // Function to calculate the most played champion\r\n  const calculateMostPlayedChampion = () => {\r\n    if (!Array.isArray(gameList) || gameList.length === 0) {\r\n      return \"Kayn\"; // Default champion if gameList is empty\r\n    }\r\n\r\n    const championCounts = {};\r\n    \r\n    gameList.forEach((gameData) => {\r\n      const searchedParticipant = gameData.info.participants.find(participant => participant.summonerName === currentSummonerName);\r\n\r\n      if (searchedParticipant) {\r\n        const championName = searchedParticipant.championName;\r\n        championCounts[championName] = (championCounts[championName] || 0) + 1;\r\n      }\r\n    });\r\n\r\n    // Find the champion with the highest count\r\n    let maxCount = 0;\r\n    let mostPlayedChampion = null;\r\n\r\n    for (const champion in championCounts) {\r\n      if (championCounts[champion] > maxCount) {\r\n        mostPlayedChampion = champion;\r\n        maxCount = championCounts[champion];\r\n      }\r\n    }\r\n\r\n    return mostPlayedChampion || \"Kayn\"; // Default champion if unable to determine\r\n  };\r\n\r\n  /*\r\n  const calculateMostRecentChampion = () => {\r\n    if (!Array.isArray(gameList) || gameList.length === 0) {\r\n      return \"Kayn\"; // Default champion if gameList is empty\r\n    }\r\n  \r\n    // Sort the gameList based on game creation timestamp in descending order\r\n    const sortedGames = gameList.slice().sort((a, b) => b.info.gameCreation - a.info.gameCreation);\r\n  \r\n    const mostRecentGameData = sortedGames.find((gameData) => {\r\n      const searchedParticipant = gameData.info.participants.find(participant => participant.summonerName === currentSummonerName);\r\n      return searchedParticipant;\r\n    });\r\n  \r\n    // Return the championName from the most recent game, or \"Kayn\" if no game is found\r\n    return mostRecentGameData ? mostRecentGameData.info.participants.find(participant => participant.summonerName === currentSummonerName).championName : \"Kayn\";\r\n  };\r\n  */\r\n\r\n  const mostPlayedChamp = calculateMostPlayedChampion();\r\n  //const mostRecentPlayedChamp = calculateMostRecentChampion();\r\n\r\n  // Check if playerData is available before fetching recent games\r\n  useEffect(() => {\r\n    if (playerData) {\r\n      setLoading(true); // Set loading to true when a new player search occurs\r\n      // Fetch recent games and limit to the last 20\r\n      axios.get(\"http://localhost:4000/recentGames\", { params: { username: currentSummonerName, tagline: currentSummonerTag } })\r\n        .then(function (response) {\r\n          // Limit the gameList to the last 20 games\r\n          const last20Games = response.data.slice(0, 20);\r\n          setGameList(last20Games);\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        })\r\n        .finally(() => {\r\n          setLoading(false); // Set loading to false when data is loaded (or on error)\r\n        });\r\n    }\r\n  }, [currentSummonerName, playerData]);\r\n\r\n  // Render the component based on loading state and playerData\r\n  if (playerData) {\r\n    return (\r\n      <div>\r\n        {loading && <div className=\"loading-circle\"></div>}\r\n        {!loading && mostPlayedChamp && (\r\n          <div className=\"champ-background-image\" \r\n            style={{ backgroundImage: `url('https://static.bigbrain.gg/assets/lol/riot_static/${version}/img/splash/${mostPlayedChamp}_${bannerVersion}.jpg')` }}\r\n          ></div>\r\n        )}\r\n      </div>\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport default Backdrop;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}